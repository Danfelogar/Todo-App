{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","autoComplete","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed4e320e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n        function TodoForm(props) {\r\n        const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n        const inputRef = useRef(null);\r\n\r\n        useEffect(() => {\r\n            inputRef.current.focus();\r\n        });\r\n        const handleChange = e => {\r\n            setInput(e.target.value);\r\n        };\r\n        const handleSubmit = e => {\r\n            e.preventDefault();\r\n            // generame un id es decir un nomero random de 0 a 10K y un elemento llamado text que adquiere el valor de input\r\n            props.onSubmit({\r\n              id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n            });\r\n            setInput('');\r\n        };\r\n          //me vacieas el input una vez generado todo para hacer un mini reset del mismo\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit} className='todo-form'>\r\n            {props.edit ? (\r\n                <>\r\n                <input\r\n                    placeholder='Update your item'\r\n                    value={input}\r\n                    autoComplete=\"off\"\r\n                    onChange={handleChange}\r\n                    name='text'\r\n                    ref={inputRef}\r\n                    className='todo-input edit'\r\n                />\r\n                <button onClick={handleSubmit} className='todo-button edit'>\r\n                    Update\r\n                </button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                <input\r\n                    placeholder='Add a todo'\r\n                    value={input}\r\n                    autoComplete=\"off\"\r\n                    onChange={handleChange}\r\n                    name='text'\r\n                    className='todo-input'\r\n                    ref={inputRef}\r\n                />\r\n                <button onClick={handleSubmit} className='todo-button'>\r\n                    Add todo\r\n                </button>\r\n                </>\r\n            )}\r\n            </form>\r\n        );\r\n        }\r\n\r\n        export default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\nconst [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n});\r\n\r\nconst submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n    id: null,\r\n    value: ''\r\n    });\r\n};\r\n\r\nif (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n}\r\n\r\nreturn todos.map((todo, index) => (\r\n    <div\r\n    className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n    key={index}\r\n    >\r\n    <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n    </div>\r\n    <div className='icons'>\r\n        <RiCloseCircleLine\r\n        onClick={() => removeTodo(todo.id)}\r\n        className='delete-icon'\r\n        />\r\n        <TiEdit\r\n        onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n        className='edit-icon'\r\n        />\r\n    </div>\r\n    </div>\r\n));\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\nconst [todos, setTodos] = useState([]);\r\n\r\nconst addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n    return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n};\r\n\r\nconst updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n    return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n};\r\n\r\nconst removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n};\r\n\r\nconst completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n    if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n    }\r\n    return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n};\r\n\r\nreturn (\r\n    <>\r\n    <h1>What things do you have pending to do?</h1>\r\n    <TodoForm onSubmit={addTodo} />\r\n    <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n    />\r\n    </>\r\n);\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport  TodoList  from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}